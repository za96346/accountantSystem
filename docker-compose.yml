version: '3.8'

services:
  work_app_front:
    container_name: workapp_frontend
    image: nginx:1.3
    ports:
      - "443:443"
      - "80:80"
    restart: always
    stdin_open: true # docker run -i
    tty: true        # docker run -t
    build: ./frontend_web/
    volumes:
      - ./frontend_web/build:/usr/share/nginx/html
      - ./frontend_web/nginx.conf:/etc/nginx/nginx.conf
      - ./volume/letsencrypt:/etc/letsencrypt/live
    networks:
      workAppNet:
        ipv4_address: 172.21.0.10
    # build: 
    #   context: ./frontend/build/Dockerfile #原路徑
    #   dockerfile: ./frontend/build/Dockerfile #備用路徑

  work_app_back:
    container_name: workapp_backend
    # ports:
    #   - "4000:4000"
    expose:
      - 4000
      - 4001
    stdin_open: true # docker run -i
    tty: true        # docker run -t
    build: ./backend/
    command: >
      bash -c "./app"
    volumes:
      - ./volume/logs:/backend/logs
      - ./backend/app:/backend/app
      - ./backend/.env:/backend/.env
    depends_on:
      - work_app_redis
      - work_app_mysql
    networks:
      workAppNet:
        ipv4_address: 172.21.0.5

  work_app_mysql:
    image: mysql:8
    container_name: workapp_mysql
    volumes:
      - ./volume/mysql:/var/lib/mysql
    stdin_open: true # docker run -i
    tty: true        # docker run -t
    environment:
      MYSQL_ROOT_PASSWORD: siou0722
      #  MYSQL_USER: wordpress
      #  MYSQL_PASSWORD: wordpress
      MYSQL_DATABASE: workApplication
      # expose: 3306
    ports:
      - "3306:3306"
    networks:
      workAppNet:
        ipv4_address: 172.21.0.2

networks:
  workAppNet:
    name: workAppNet
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/24